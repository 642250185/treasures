var Tower = require('./tower');
var exp = module.exports;

function TowerAOI(config){
  this.map = config.map;
  this.towerConfig = config.tower;
  
  this.towers = {};
  
  this.idsMap = {};
  
  this.init();
}

var pro = TowerAOI.prototype;

pro.init = function(){
  var map = this.map;
  var tower = this.towerConfig;
  
  this.max = {
    x: Math.ceil(map.width/tower.width) - 1,
    y: Math.ceil(map.height/tower.height) - 1
  }
  
   //´´½¨¼àÌýtower 
 for(var i = 0; i<Math.ceil(map.width/tower.width); i++){
   this.towers[i] = {};
   for(var j = 0; j < Math.ceil(map.height/tower.height); j++)
   this.towers[i][j] = Tower.create(); 
 } 
}

pro.getIdsByPos = function(pos){
  if(!this.checkPos(pos))
    return [];
  
  var result = [];
  
  var posX = Math.floor(pos.x/this.towerConfig.width);
  var posY = Math.floor(pos.y/this.towerConfig.height);
  
  for(var i = posX-1; i <= posX+1; i++){
    if(i < 0 || i > this.max.x){
      continue;
    }
    
    for(var j = posY-1; j <= posY+1; j++){
      if(j < 0 || j > this.max.y){
        continue;
      }

      if(!!this.towers[i][j]){
        result = addMap(result, this.towers[i][j].getIds());
      }
    }
  }
  return result;
}

pro.getIdsByPath = function(start, end){
  var result = [];
  var towers = [];
  var w = this.towerConfig.width;
  var h = this.towerConfig.height;
  
  var x0 = Math.floor((start.x<end.x?start.x:end.x)/w) - 1;
  var x1 = Math.floor((start.x>end.x?start.x:end.x)/w) + 1;
  
  var y0 = Math.floor((start.y<end.y?start.y:end.y)/h) - 1;
  var y1 = Math.floor((start.y>end.y?start.y:end.y)/h) + 1;
  
  //console.error('x0 : ' + x0 + ' , x1 : ' + x1 + ' , y0 : ' + y0 + ' , y1 : ' + y1);
  for(var i = x0; i <= x1; i++){
    if(i < 0 || i > this.max.x)
      continue;
    
    for(var j = y0; j <= y1; j++){
      if(j < 0 || j > this.max.y)
        continue;
      if(!!this.towers[i][j])
        towers.push({i:i, j : j});
        result = addMap(result, this.towers[i][j].getIds());  
    }
  }
  result.towers = towers;  
  return result;
}

pro.addObject = function(id, pos){
  if(this.checkPos(pos)){
    var p = this.transPos(pos);
    this.towers[p.x][p.y].add(id);
  }
  
  return true;
}

pro.removeObject = function(id, pos){
  if(this.checkPos(pos)){
    var p = this.transPos(pos);
    this.towers[p.x][p.y].remove(id);
    return true;
  }
  
  return false;
}

pro.updateObject = function(id, oldPos, newPos){
  if(!this.checkPos(oldPos.x, oldPos.y) || !this.checkPos(newPos.x, newPos.y))
    return false;
  
  var p1 = this.transPos(oldPos);
  var p2 = this.transPos(newPos);
  
  if(p1.x===p2.x && p1.y===p2.y)
    return true;
  else{
    this.towers[p1.x][p1.y].remove(id);
    this.towers[p2.x][p2.y].add(id);
  }
}

pro.checkPos = function(pos){
  if(!pos)
    return false;
  if(pos.x < 0 || pos.y < 0 || pos.x > this.map.width || pos.y > this.map.height)
    return false;
  return true;
}

pro.transPos = function(pos){
  return {
    x : Math.floor(pos.x/this.towerConfig.width),
    y : Math.floor(pos.y/this.towerConfig.height)
  }
}

function addMap(arr, map){
  for(var key in map)
    arr.push(map[key]);
  return arr;
}
exp.getService = function(config){
  return new TowerAOI(config);
}

